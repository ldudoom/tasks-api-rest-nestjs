Vamos a instalar el CLI de nest.js  (https://docs.nestjs.com/)
    $ npm i -g @nestjs/cli
        Which package manager would you ❤️  to use?  -> seleccionamos "npm"
    $ nest new [project_directory]

El proyecto creado por el CLI de NestJs crea la siguiente estructura de directorios:
    - node_modules:  Aqui se encuentran instaladas todas las dependencias del proyecto
    - scr: Aqui se encontrara todo el codigo de nuestra aplicacion
    - test: Este es el directorio donde programaremos las pruebas unitarias y de integracion
    - .eslintrc.js: Es una herramienta que permite el analisis de codigo estatico, esto nos ayuda a 
        identificar patrones con errores en el codigo
    - .gitignore: Archivo para colocar archivos y/o directorios que no seran trackeados por GIT
    - .prettyerrc: Archivo para configuracion de impresion de errores
    - nest-cli.json: Configuracion de NestJS CLI 

COMANDOS BASICOS DE LA APLICACION
    Para saber los comandos que vamos a poder ejecutar, revisamos el archivo package.json, y los que mas vamos a usar son:

    $ npm run build  -> Compila el codigo
    $ npm run start  -> Inicia el servidor
    $ npm run start:dev  ->  Inicia el servidor en modo desarrollo
    $ npm run start:prod -> Inicia el servidor en modo produccion

CREACION DE UN CONTROLADOR CON NEST CLI
    Con el comando
        $ nest --help
    podremos ver la ayuda del CLI de nest

    $ nest generate controller nombreControlador
Podemos colocar el mismo comando de manera abreviada de la siguiente manera
    $ nest g co nombreControlador
        NOTA: Si queremos ya trabajar con una estructura mas ordenada, podemos ejecutar el comando de la siguiente manera:
            $ nest g co api/v1/users
            Esto creara un controlador users.controller.ts dentro de los directorios /src/api/v1

Esto generara dentro de "/src" un directorio con el nombre del controlador que hayamos colocado

Dentro de este directorio estaran 2 archivos:
    - nombreControlador.controller.spec.ts  -> archivos de pruebas
    - nombreControlador.controller.ts       -> controlador como tal

Para nuestra aplicacion vamos a crear el controlador para gestionar tareas:
    $ nest g co api/v1/task

Luego cambiaremos dentro del controlador
    @Controller('task')
por
    @Controller('api/v1/task')

Generando el controlador con el CLI de NEST, el archivo app.module.ts queda actualizado incluyendo nuestro nuevo controlador 
sutomaticamente

CONFIGURACION DE MODULO
    Ahora vamos a crear un modulo para poder manejar nuestro modulo de la aplicacion de tareas, independiente a nuestro app.module 
    para que en caso de que la aplicacion crezca, no se vuelva un problema darle mantenimiento

    primero vamos a generar el servide de nuestro modulo task:
        $ nest g s api/v1/task

    Para generar nuestro modulo ejecutaremos:
        $ nest g mo api/v1/task

    Ahora en nuestro task.module vamos a importar los controllers y providers, y los vamos a quitar de app.module
    En app.module dejamos "imports: [TaskModule]," para utilizar TaskModule para importar nuestro controller y service

    Ahora, para poder usar nuestra aplicacion vamos a necesitar datos de transferencia, para eso lo primero que vamos
    a hacer es crear dentro de "api/v1/task" un directorio llamado "dto" y dentro de este directorio creamos el archivo 
    task.dto.ts con el siguiente contenido:

        export class TaskDTO{
            readonly description: string;
            readonly isDone: boolean;
        }

    





